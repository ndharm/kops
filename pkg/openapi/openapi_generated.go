// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	openapi "k8s.io/apimachinery/pkg/openapi"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

func GetOpenAPIDefinitions(ref openapi.ReferenceCallback) map[string]openapi.OpenAPIDefinition {
	return map[string]openapi.OpenAPIDefinition{
		"k8s.io/apimachinery/pkg/api/resource.Quantity": resource.Quantity{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/api/resource.int64Amount": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "int64Amount represents a fixed precision numerator and arbitrary scale exponent. It is faster than operations on inf.Dec for values that can be represented as int64.",
					Properties: map[string]spec.Schema{
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
						"scale": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
					Required: []string{"value", "scale"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroup contains the name, the supported versions, and the preferred version of a group.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the name of the group.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the versions supported in this group.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
										},
									},
								},
							},
						},
						"preferredVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "preferredVersion is the version preferred by the API server, which probably is the storage version.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery", "k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groups": {
							SchemaProps: spec.SchemaProps{
								Description: "groups is a list of APIGroup.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groups"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResource specifies the name of a resource and whether it is namespaced.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name is the plural name of the resource.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"singularName": {
							SchemaProps: spec.SchemaProps{
								Description: "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespaced": {
							SchemaProps: spec.SchemaProps{
								Description: "namespaced indicates if a resource is namespaced or not.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"verbs": {
							SchemaProps: spec.SchemaProps{
								Description: "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"shortNames": {
							SchemaProps: spec.SchemaProps{
								Description: "shortNames is a list of suggested short names of the resource.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"categories": {
							SchemaProps: spec.SchemaProps{
								Description: "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "singularName", "namespaced", "kind", "verbs"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResourceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion is the group and version this APIResourceList is for.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resources": {
							SchemaProps: spec.SchemaProps{
								Description: "resources contains the name of the resources and if they are namespaced.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"),
										},
									},
								},
							},
						},
					},
					Required: []string{"groupVersion", "resources"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIVersions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"versions": {
							SchemaProps: spec.SchemaProps{
								Description: "versions are the api versions that are available.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serverAddressByClientCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
										},
									},
								},
							},
						},
					},
					Required: []string{"versions", "serverAddressByClientCIDRs"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.DeleteOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DeleteOptions may be provided when deleting an API object.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"gracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"preconditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"),
							},
						},
						"orphanDependents": {
							SchemaProps: spec.SchemaProps{
								Description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"propagationPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Duration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
					Properties: map[string]spec.Schema{
						"Duration": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
					Required: []string{"Duration"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ExportOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExportOptions is the query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"export": {
							SchemaProps: spec.SchemaProps{
								Description: "Should this value be exported.  Export strips fields that a user can not specify.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"exact": {
							SchemaProps: spec.SchemaProps{
								Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"export", "exact"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GetOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GetOptions is the standard query options to the standard REST get call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"includeUninitialized": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, partially initialized resources are included in the response.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersion": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
					Properties: map[string]spec.Schema{
						"groupVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "groupVersion specifies the API group and version in the form \"group/version\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"groupVersion", "version"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version", "kind"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionResource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
					Properties: map[string]spec.Schema{
						"group": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"resource": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"group", "version", "resource"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Initializer": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Initializer is information about an initializer that has not yet completed.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "name of the process that is responsible for initializing this object.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Initializers": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Initializers tracks the progress of initialization.",
					Properties: map[string]spec.Schema{
						"pending": {
							SchemaProps: spec.SchemaProps{
								Description: "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Initializer"),
										},
									},
								},
							},
						},
						"result": {
							SchemaProps: spec.SchemaProps{
								Description: "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Status"),
							},
						},
					},
					Required: []string{"pending"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Initializer", "k8s.io/apimachinery/pkg/apis/meta/v1.Status"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.InternalEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "InternalEvent makes watch.Event versioned",
					Properties: map[string]spec.Schema{
						"Type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.Object"),
							},
						},
					},
					Required: []string{"Type", "Object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.Object"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
					Properties: map[string]spec.Schema{
						"matchLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"matchExpressions": {
							SchemaProps: spec.SchemaProps{
								Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
					Properties: map[string]spec.Schema{
						"key": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "key",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "key is the label key that the selector applies to.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"operator": {
							SchemaProps: spec.SchemaProps{
								Description: "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"values": {
							SchemaProps: spec.SchemaProps{
								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"key", "operator"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
					Properties: map[string]spec.Schema{
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListOptions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ListOptions is the query options to a standard REST list call.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"labelSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"fieldSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"includeUninitialized": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, partially initialized resources are included in the response.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"watch": {
							SchemaProps: spec.SchemaProps{
								Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"timeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Timeout for the list/watch call.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime": v1.MicroTime{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generateName": {
							SchemaProps: spec.SchemaProps{
								Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"namespace": {
							SchemaProps: spec.SchemaProps{
								Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"selfLink": {
							SchemaProps: spec.SchemaProps{
								Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resourceVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"generation": {
							SchemaProps: spec.SchemaProps{
								Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"creationTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionTimestamp": {
							SchemaProps: spec.SchemaProps{
								Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"deletionGracePeriodSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"labels": {
							SchemaProps: spec.SchemaProps{
								Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"annotations": {
							SchemaProps: spec.SchemaProps{
								Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ownerReferences": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-merge-key": "uid",
									"x-kubernetes-patch-strategy":  "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
										},
									},
								},
							},
						},
						"initializers": {
							SchemaProps: spec.SchemaProps{
								Description: "An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Initializers"),
							},
						},
						"finalizers": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-strategy": "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Initializers", "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "API version of the referent.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"controller": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, this reference points to the managing controller.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"blockOwnerDeletion": {
							SchemaProps: spec.SchemaProps{
								Description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"apiVersion", "kind", "name", "uid"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Patch": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
					Properties: map[string]spec.Schema{
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the target UID.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.RootPaths": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
					Properties: map[string]spec.Schema{
						"paths": {
							SchemaProps: spec.SchemaProps{
								Description: "paths are the paths available at root.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"paths"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
					Properties: map[string]spec.Schema{
						"clientCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serverAddress": {
							SchemaProps: spec.SchemaProps{
								Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"clientCIDR", "serverAddress"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Status": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Status is a return value for calls that don't return other objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the status of this operation.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"details": {
							SchemaProps: spec.SchemaProps{
								Description: "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"),
							},
						},
						"code": {
							SchemaProps: spec.SchemaProps{
								Description: "Suggested HTTP return code for this status, 0 if not set.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
					Properties: map[string]spec.Schema{
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"field": {
							SchemaProps: spec.SchemaProps{
								Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "The group attribute of the resource associated with the status StatusReason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"uid": {
							SchemaProps: spec.SchemaProps{
								Description: "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"causes": {
							SchemaProps: spec.SchemaProps{
								Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"),
										},
									},
								},
							},
						},
						"retryAfterSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "If specified, the time in seconds before the operation should be retried.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.Time": v1.Time{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
					Properties: map[string]spec.Schema{
						"seconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"nanos": {
							SchemaProps: spec.SchemaProps{
								Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"seconds", "nanos"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/apis/meta/v1.WatchEvent": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Event represents a single event to a watched resource.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"object": {
							SchemaProps: spec.SchemaProps{
								Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
					},
					Required: []string{"type", "object"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"k8s.io/apimachinery/pkg/runtime.RawExtension": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
					Properties: map[string]spec.Schema{
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw is the underlying serialization of this object.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
					},
					Required: []string{"Raw"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.TypeMeta": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/runtime.Unknown": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
					Properties: map[string]spec.Schema{
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"Raw": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
						"ContentEncoding": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ContentType": {
							SchemaProps: spec.SchemaProps{
								Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"Raw", "ContentEncoding", "ContentType"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/apimachinery/pkg/util/intstr.IntOrString": intstr.IntOrString{}.OpenAPIDefinition(),
		"k8s.io/apimachinery/pkg/version.Info": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Info contains versioning information. how we'll want to distribute that information.",
					Properties: map[string]spec.Schema{
						"major": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"minor": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitCommit": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"gitTreeState": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"buildDate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"goVersion": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"compiler": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"platform": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"major", "minor", "gitVersion", "gitCommit", "gitTreeState", "buildDate", "goVersion", "compiler", "platform"},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.AccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"dns": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.DNSAccessSpec"),
							},
						},
						"loadBalancer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.LoadBalancerAccessSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.DNSAccessSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.LoadBalancerAccessSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.AlwaysAllowAuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.AuthenticationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kopeio": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioAuthenticationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioAuthenticationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.AuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"alwaysAllow": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.AlwaysAllowAuthorizationSpec"),
							},
						},
						"rbac": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.RBACAuthorizationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.AlwaysAllowAuthorizationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.RBACAuthorizationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.BastionSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"enable": {
							SchemaProps: spec.SchemaProps{
								Description: "Controls if a private topology should deploy a bastion host or not The bastion host is designed to be a simple, and secure bridge between the public subnet and the private subnet",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"machineType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"idleTimeout": {
							SchemaProps: spec.SchemaProps{
								Description: "IdleTimeout is the bastion's Loadbalancer idle timeout",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.CNINetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CNI is the specification for networking that is implemented by a Daemonset Networking is not managed by kops - we can create options here that directly configure e.g. weave but this is useful for arbitrary network modes or for modes that don't need additional configuration.",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.CalicoNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Calico declares that we want Calico networking",
					Properties: map[string]spec.Schema{
						"crossSubnet": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.CanalNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Canal declares that we want Canal networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ClassicNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClassicNetworkingSpec is the specification of classic networking mode, integrated into kubernetes",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.CloudConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"multizone": {
							SchemaProps: spec.SchemaProps{
								Description: "GCE cloud-config options",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodeTags": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"nodeInstancePrefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"disableSecurityGroupIngress": {
							SchemaProps: spec.SchemaProps{
								Description: "AWS cloud-config options",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"elbSecurityGroup": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereUsername": {
							SchemaProps: spec.SchemaProps{
								Description: "vSphere cloud-config specs",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"vSpherePassword": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereServer": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereDatacenter": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereDatastore": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereResourcePool": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereCoreDNSServer": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.Cluster": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of a Cluster.",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.Cluster"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.Cluster"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"channel": {
							SchemaProps: spec.SchemaProps{
								Description: "The Channel we are following",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configBase": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigBase is the path where we store configuration for the cluster This might be different that the location when the cluster spec itself is stored, both because this must be accessible to the cluster, and because it might be on a different cloud or storage system (etcd vs S3)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "The CloudProvider to use (aws or gce)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubernetesVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "The version of kubernetes to install (optional, and can be a \"spec\" like stable)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"zones": {
							SchemaProps: spec.SchemaProps{
								Description: "Configuration of zones we are targeting",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterZoneSpec"),
										},
									},
								},
							},
						},
						"project": {
							SchemaProps: spec.SchemaProps{
								Description: "Project is the cloud project we should use, required on GCE",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masterPublicName": {
							SchemaProps: spec.SchemaProps{
								Description: "MasterPublicName is the external DNS name for the master nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masterInternalName": {
							SchemaProps: spec.SchemaProps{
								Description: "MasterInternalName is the internal DNS name for the master nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR used for the AWS VPC / GCE Network, or otherwise allocated to k8s This is a real CIDR, not the internal k8s network",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkID": {
							SchemaProps: spec.SchemaProps{
								Description: "NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"topology": {
							SchemaProps: spec.SchemaProps{
								Description: "Topology defines the type of network topology to use on the cluster - default public This is heavily weighted towards AWS for the time being, but should also be agnostic enough to port out to GCE later if needed",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.TopologySpec"),
							},
						},
						"secretStore": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretStore is the VFS path to where secrets are stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"keyStore": {
							SchemaProps: spec.SchemaProps{
								Description: "KeyStore is the VFS path to where SSL keys and certificates are stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configStore": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroupss etc) is stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"dnsZone": {
							SchemaProps: spec.SchemaProps{
								Description: "DNSZone is the DNS zone we should use when configuring DNS This is because some clouds let us define a managed zone foo.bar, and then have kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone. DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName Note that DNSZone can either by the host name of the zone (containing dots), or can be an identifier for the zone.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterDNSDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"multizone": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"serviceClusterIPRange": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nonMasqueradeCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live) It cannot overlap ServiceClusterIPRange",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"adminAccess": {
							SchemaProps: spec.SchemaProps{
								Description: "AdminAccess determines the permitted access to the admin endpoints (SSH & master HTTPS) Currently only a single CIDR is supported (though a richer grammar could be added in future)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"isolateMasters": {
							SchemaProps: spec.SchemaProps{
								Description: "IsolatesMasters determines whether we should lock down masters so that they are not on the pod network. true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master if they have hostNetwork=true. false is now the default, and it will:\n * give the master a normal PodCIDR\n * run kube-proxy on the master\n * enable debugging handlers on the master, so kubectl logs works",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"updatePolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "UpdatePolicy determines the policy for applying upgrades automatically. Valid values:\n  'external' do not apply updates automatically - they are applied manually or by an external system\n  missing: default policy (currently OS security upgrades that do not require a reboot)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"additionalPolicies": {
							SchemaProps: spec.SchemaProps{
								Description: "Additional policies to add for roles",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"etcdClusters": {
							SchemaProps: spec.SchemaProps{
								Description: "EtcdClusters stores the configuration for each cluster",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdClusterSpec"),
										},
									},
								},
							},
						},
						"docker": {
							SchemaProps: spec.SchemaProps{
								Description: "Component configurations",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.DockerConfig"),
							},
						},
						"kubeDNS": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeDNSConfig"),
							},
						},
						"kubeAPIServer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeAPIServerConfig"),
							},
						},
						"kubeControllerManager": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeControllerManagerConfig"),
							},
						},
						"kubeScheduler": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeSchedulerConfig"),
							},
						},
						"kubeProxy": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeProxyConfig"),
							},
						},
						"kubelet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec"),
							},
						},
						"masterKubelet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec"),
							},
						},
						"cloudConfig": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.CloudConfiguration"),
							},
						},
						"networking": {
							SchemaProps: spec.SchemaProps{
								Description: "Networking configuration",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.NetworkingSpec"),
							},
						},
						"api": {
							SchemaProps: spec.SchemaProps{
								Description: "API field controls how the API is exposed outside the cluster",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.AccessSpec"),
							},
						},
						"authentication": {
							SchemaProps: spec.SchemaProps{
								Description: "Authentication field controls how the cluster is configured for authentication",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.AuthenticationSpec"),
							},
						},
						"authorization": {
							SchemaProps: spec.SchemaProps{
								Description: "Authorization field controls how the cluster is configured for authorization",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.AuthorizationSpec"),
							},
						},
						"cloudLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "Tags for AWS instance groups",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"hooks": {
							SchemaProps: spec.SchemaProps{
								Description: "Hooks for custom actions e.g. on first installation",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.HookSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.AccessSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.AuthenticationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.AuthorizationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.CloudConfiguration", "k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterZoneSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.DockerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdClusterSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.HookSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeAPIServerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeControllerManagerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeDNSConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeProxyConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeSchedulerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.NetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.TopologySpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ClusterZoneSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"privateCIDR": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"id": {
							SchemaProps: spec.SchemaProps{
								Description: "ProviderID is the cloud provider id for the objects associated with the zone (the subnet on AWS)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.DNSAccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.DNSSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.DockerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"bridge": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipTables": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ipMasq": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"logDriver": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logOpt": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage maps to the docker storage flag But nodeup will also process a comma-separate list, selecting the first supported option",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"insecureRegistry": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"registryMirrors": {
							SchemaProps: spec.SchemaProps{
								Description: "Set mirrors for dockerd, benefiting cluster provisioning and image pulling",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"mtu": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"bridgeIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The bridge cidr (--bip) flag",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "The version of docker to install Be careful if changing this; not all docker versions are validated, and they will break in bad ways.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdClusterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the name of the etcd cluster (main, events etc)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdMembers": {
							SchemaProps: spec.SchemaProps{
								Description: "EtcdMember stores the configurations for each member of the cluster (including the data volume)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdMemberSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdMemberSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.EtcdMemberSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the name of the member within the etcd cluster",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"zone": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"volumeType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"volumeSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"kmsKeyId": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"encryptedVolume": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ExecContainerAction": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "Docker image name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"command": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.ExternalNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExternalNetworkingSpec is the specification for networking that is implemented by a Daemonset It also uses kubenet",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.Federation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.FederationSpec"),
							},
						},
					},
					Required: []string{"spec"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.FederationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.FederationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.Federation"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.Federation"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.FederationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"controllers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"members": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"dnsName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.FlannelNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Flannel declares that we want Flannel networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.HookSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"execContainer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.ExecContainerAction"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.ExecContainerAction"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "InstanceGroup represents a group of instances (either nodes or masters) with the same configuration",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroupSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroupSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroup"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.InstanceGroupSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"role": {
							SchemaProps: spec.SchemaProps{
								Description: "Type determines the role of instances in this group: masters or nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"minSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"maxSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"machineType": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeInstancePrefix string `json:\",omitempty\"` NodeLabels         string `json:\",omitempty\"`",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rootVolumeSize": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeSize is the size of the EBS root volume to use, in GB",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"rootVolumeType": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeType is the type of the EBS root volume to use (e.g. gp2)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rootVolumeOptimization": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeOptimization enables EBS optimization for an instance",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"zones": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"maxPrice": {
							SchemaProps: spec.SchemaProps{
								Description: "MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"associatePublicIp": {
							SchemaProps: spec.SchemaProps{
								Description: "AssociatePublicIP is true if we want instances to have a public IP",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"additionalSecurityGroups": {
							SchemaProps: spec.SchemaProps{
								Description: "AdditionalSecurityGroups attaches additional security groups (e.g. i-123456)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"cloudLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudLabels indicates the labels for instances in this group, at the AWS level",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nodeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeLabels indicates the kubernetes labels for nodes in this group",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"tenancy": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes the tenancy of the instance group. Can be either default or dedicated. Currently only applies to AWS.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubelet": {
							SchemaProps: spec.SchemaProps{
								Description: "Kubelet overrides kubelet config from the ClusterSpec",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec"),
							},
						},
						"taints": {
							SchemaProps: spec.SchemaProps{
								Description: "Taints indicates the kubernetes taints for nodes in this group",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioAuthenticationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Kopeio declares that we want Kopeio networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeAPIServerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"pathSrvKubernetes": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pathSrvSshproxy": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"securePort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"insecurePort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"address": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdServers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"etcdServersOverrides": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"admissionControl": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serviceClusterIPRange": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"clientCAFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"basicAuthFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tlsCertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tlsPrivateKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tokenAuthFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"allowPrivileged": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"apiServerCount": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"runtimeConfig": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeletClientCertificate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kubeletClientKey": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"anonymousAuth": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"kubeletPreferredAddressTypes": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"storageBackend": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"oidcUsernameClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcGroupsClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "If provided, the name of a custom OpenID Connect claim for specifying user groups. The claim value is expected to be a string or array of strings.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcIssuerURL": {
							SchemaProps: spec.SchemaProps{
								Description: "The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcClientID": {
							SchemaProps: spec.SchemaProps{
								Description: "The client ID for the OpenID Connect client, must be set if oidc-issuer-url is set.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, the OpenID server's certificate will be verified by one of the authorities in the oidc-ca-file otherwise the host's root CA set will be used.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"auditLogPath": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, all requests coming to the apiserver will be logged to this file.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"auditLogMaxAge": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum number of days to retain old audit log files based on the timestamp encoded in their filename.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"auditLogMaxBackups": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum number of old audit log files to retain.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"auditLogMaxSize": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum size in megabytes of the audit log file before it gets rotated. Defaults to 100MB.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"authenticationTokenWebhookConfigFile": {
							SchemaProps: spec.SchemaProps{
								Description: "File with webhook configuration for token authentication in kubeconfig format. The API server will query the remote service to determine authentication for bearer tokens.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"authenticationTokenWebhookCacheTtl": {
							SchemaProps: spec.SchemaProps{
								Description: "The duration to cache responses from the webhook token authenticator. Default is 2m. (default 2m0s)",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"authorizationMode": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"authorizationRbacSuperUser": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeControllerManagerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"master": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"serviceAccountPrivateKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pathSrvKubernetes": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "// port is the port that the controller-manager's http service runs on. Port int32 `json:\"port\"` // address is the IP address to serve on (set to 0.0.0.0 for all interfaces). Address string `json:\"address\"` cloudProvider is the provider for cloud services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "// concurrentEndpointSyncs is the number of endpoint syncing operations // that will be done concurrently. Larger number = faster endpoint updating, // but more CPU (and network) load. ConcurrentEndpointSyncs int32 `json:\"concurrentEndpointSyncs\"` // concurrentRSSyncs is the number of replica sets that are  allowed to sync // concurrently. Larger number = more responsive replica  management, but more // CPU (and network) load. ConcurrentRSSyncs int32 `json:\"concurrentRSSyncs\"` // concurrentRCSyncs is the number of replication controllers that are // allowed to sync concurrently. Larger number = more responsive replica // management, but more CPU (and network) load. ConcurrentRCSyncs int32 `json:\"concurrentRCSyncs\"` // concurrentResourceQuotaSyncs is the number of resource quotas that are // allowed to sync concurrently. Larger number = more responsive quota // management, but more CPU (and network) load. ConcurrentResourceQuotaSyncs int32 `json:\"concurrentResourceQuotaSyncs\"` // concurrentDeploymentSyncs is the number of deployment objects that are // allowed to sync concurrently. Larger number = more responsive deployments, // but more CPU (and network) load. ConcurrentDeploymentSyncs int32 `json:\"concurrentDeploymentSyncs\"` // concurrentDaemonSetSyncs is the number of daemonset objects that are // allowed to sync concurrently. Larger number = more responsive daemonset, // but more CPU (and network) load. ConcurrentDaemonSetSyncs int32 `json:\"concurrentDaemonSetSyncs\"` // concurrentJobSyncs is the number of job objects that are // allowed to sync concurrently. Larger number = more responsive jobs, // but more CPU (and network) load. ConcurrentJobSyncs int32 `json:\"concurrentJobSyncs\"` // concurrentNamespaceSyncs is the number of namespace objects that are // allowed to sync concurrently. ConcurrentNamespaceSyncs int32 `json:\"concurrentNamespaceSyncs\"` // lookupCacheSizeForRC is the size of lookup cache for replication controllers. // Larger number = more responsive replica management, but more MEM load. LookupCacheSizeForRC int32 `json:\"lookupCacheSizeForRC\"` // lookupCacheSizeForRS is the size of lookup cache for replicatsets. // Larger number = more responsive replica management, but more MEM load. LookupCacheSizeForRS int32 `json:\"lookupCacheSizeForRS\"` // lookupCacheSizeForDaemonSet is the size of lookup cache for daemonsets. // Larger number = more responsive daemonset, but more MEM load. LookupCacheSizeForDaemonSet int32 `json:\"lookupCacheSizeForDaemonSet\"` // serviceSyncPeriod is the period for syncing services with their external // load balancers. ServiceSyncPeriod unversioned.Duration `json:\"serviceSyncPeriod\"` // nodeSyncPeriod is the period for syncing nodes from cloudprovider. Longer // periods will result in fewer calls to cloud provider, but may delay addition // of new nodes to cluster. NodeSyncPeriod unversioned.Duration `json:\"nodeSyncPeriod\"` // resourceQuotaSyncPeriod is the period for syncing quota usage status // in the system. ResourceQuotaSyncPeriod unversioned.Duration `json:\"resourceQuotaSyncPeriod\"` // namespaceSyncPeriod is the period for syncing namespace life-cycle // updates. NamespaceSyncPeriod unversioned.Duration `json:\"namespaceSyncPeriod\"` // pvClaimBinderSyncPeriod is the period for syncing persistent volumes // and persistent volume claims. PVClaimBinderSyncPeriod unversioned.Duration `json:\"pvClaimBinderSyncPeriod\"` // minResyncPeriod is the resync period in reflectors; will be random between // minResyncPeriod and 2*minResyncPeriod. MinResyncPeriod unversioned.Duration `json:\"minResyncPeriod\"` // horizontalPodAutoscalerSyncPeriod is the period for syncing the number of // pods in horizontal pod autoscaler. HorizontalPodAutoscalerSyncPeriod unversioned.Duration `json:\"horizontalPodAutoscalerSyncPeriod\"` // deploymentControllerSyncPeriod is the period for syncing the deployments. DeploymentControllerSyncPeriod unversioned.Duration `json:\"deploymentControllerSyncPeriod\"` // podEvictionTimeout is the grace period for deleting pods on failed nodes. PodEvictionTimeout unversioned.Duration `json:\"podEvictionTimeout\"` // deletingPodsQps is the number of nodes per second on which pods are deleted in // case of node failure. DeletingPodsQps float32 `json:\"deletingPodsQps\"` // deletingPodsBurst is the number of nodes on which pods are bursty deleted in // case of node failure. For more details look into RateLimiter. DeletingPodsBurst int32 `json:\"deletingPodsBurst\"` // nodeMontiorGracePeriod is the amount of time which we allow a running node to be // unresponsive before marking it unhealthy. Must be N times more than kubelet's // nodeStatusUpdateFrequency, where N means number of retries allowed for kubelet // to post node status. NodeMonitorGracePeriod unversioned.Duration `json:\"nodeMonitorGracePeriod\"` // registerRetryCount is the number of retries for initial node registration. // Retry interval equals node-sync-period. RegisterRetryCount int32 `json:\"registerRetryCount\"` // nodeStartupGracePeriod is the amount of time which we allow starting a node to // be unresponsive before marking it unhealthy. NodeStartupGracePeriod unversioned.Duration `json:\"nodeStartupGracePeriod\"` // nodeMonitorPeriod is the period for syncing NodeStatus in NodeController. NodeMonitorPeriod unversioned.Duration `json:\"nodeMonitorPeriod\"` // serviceAccountKeyFile is the filename containing a PEM-encoded private RSA key // used to sign service account tokens. ServiceAccountKeyFile string `json:\"serviceAccountKeyFile\"` // enableProfiling enables profiling via web interface host:port/debug/pprof/ EnableProfiling bool `json:\"enableProfiling\"` clusterName is the instance prefix for the cluster.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterCIDR is CIDR Range for Pods in cluster.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"allocateNodeCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "// serviceCIDR is CIDR Range for Services in cluster. ServiceCIDR string `json:\"serviceCIDR\"` // NodeCIDRMaskSize is the mask size for node cidr in cluster. NodeCIDRMaskSize int32 `json:\"nodeCIDRMaskSize\"` allocateNodeCIDRs enables CIDRs for Pods to be allocated and, if ConfigureCloudRoutes is true, to be set on the cloud provider.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"configureCloudRoutes": {
							SchemaProps: spec.SchemaProps{
								Description: "configureCloudRoutes enables CIDRs allocated with allocateNodeCIDRs to be configured on the cloud provider.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"rootCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "rootCAFile is the root certificate authority will be included in service account's token secret. This must be a valid PEM-encoded CA bundle.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"leaderElection": {
							SchemaProps: spec.SchemaProps{
								Description: "// contentType is contentType of requests sent to apiserver. ContentType string `json:\"contentType\"` // kubeAPIQPS is the QPS to use while talking with kubernetes apiserver. KubeAPIQPS float32 `json:\"kubeAPIQPS\"` // kubeAPIBurst is the burst to use while talking with kubernetes apiserver. KubeAPIBurst int32 `json:\"kubeAPIBurst\"` leaderElection defines the configuration of leader election client.",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.LeaderElectionConfiguration"),
							},
						},
						"attachDetachReconcileSyncPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "ReconcilerSyncLoopPeriod is the amount of time the reconciler sync states loop wait between successive executions. Is set to 1 min by kops by default",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"terminatedPodGCThreshold": {
							SchemaProps: spec.SchemaProps{
								Description: "terminatedPodGCThreshold is the number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. If <= 0, the terminated pod garbage collector is disabled.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"useServiceAccountCredentials": {
							SchemaProps: spec.SchemaProps{
								Description: "UseServiceAccountCredentials controls whether we use individual service account credentials for each controller.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/kops/pkg/apis/kops/v1alpha1.LeaderElectionConfiguration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeDNSConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "Image is the name of the docker image to run",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"domain": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"serverIP": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeProxyConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cpuRequest": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"clusterCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterCIDR is the CIDR range of the pods in the cluster. It is used to bridge traffic coming from outside of the cluster. If not provided, no off-cluster bridging will be performed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "hostnameOverride, if non-empty, will be used as the identity instead of the actual hostname. Note: We recognize some additional values:\n @aws uses the hostname from the AWS metadata service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"master": {
							SchemaProps: spec.SchemaProps{
								Description: "// iptablesMasqueradeBit is the bit of the iptables fwmark space to use for SNAT if using // the pure iptables proxy mode. Values must be within the range [0, 31]. IPTablesMasqueradeBit *int32 `json:\"iptablesMasqueradeBit\"` // iptablesSyncPeriod is the period that iptables rules are refreshed (e.g. '5s', '1m', // '2h22m').  Must be greater than 0. IPTablesSyncPeriod unversioned.Duration `json:\"iptablesSyncPeriodSeconds\"` // kubeconfigPath is the path to the kubeconfig file with authorization information (the // master location is set by the master flag). KubeconfigPath string `json:\"kubeconfigPath\"` // masqueradeAll tells kube-proxy to SNAT everything if using the pure iptables proxy mode. MasqueradeAll bool `json:\"masqueradeAll\"` master is the address of the Kubernetes API server (overrides any value in kubeconfig)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeSchedulerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"master": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"leaderElection": {
							SchemaProps: spec.SchemaProps{
								Description: "// port is the port that the scheduler's http service runs on. Port int32 `json:\"port\"` // address is the IP address to serve on. Address string `json:\"address\"` // algorithmProvider is the scheduling algorithm provider to use. AlgorithmProvider string `json:\"algorithmProvider\"` // policyConfigFile is the filepath to the scheduler policy configuration. PolicyConfigFile string `json:\"policyConfigFile\"` // enableProfiling enables profiling via web interface. EnableProfiling bool `json:\"enableProfiling\"` // contentType is contentType of requests sent to apiserver. ContentType string `json:\"contentType\"` // kubeAPIQPS is the QPS to use while talking with kubernetes apiserver. KubeAPIQPS float32 `json:\"kubeAPIQPS\"` // kubeAPIBurst is the QPS burst to use while talking with kubernetes apiserver. KubeAPIBurst int32 `json:\"kubeAPIBurst\"` // schedulerName is name of the scheduler, used to select which pods // will be processed by this scheduler, based on pod's annotation with // key 'scheduler.alpha.kubernetes.io/name'. SchedulerName string `json:\"schedulerName\"` // RequiredDuringScheduling affinity is not symmetric, but there is an implicit PreferredDuringScheduling affinity rule // corresponding to every RequiredDuringScheduling affinity rule. // HardPodAffinitySymmetricWeight represents the weight of implicit PreferredDuringScheduling affinity rule, in the range 0-100. HardPodAffinitySymmetricWeight int `json:\"hardPodAffinitySymmetricWeight\"` // Indicate the \"all topologies\" set for empty topologyKey when it's used for PreferredDuringScheduling pod anti-affinity. FailureDomains string `json:\"failureDomains\"` leaderElection defines the configuration of leader election client.",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.LeaderElectionConfiguration"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.LeaderElectionConfiguration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubeletConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"apiServers": {
							SchemaProps: spec.SchemaProps{
								Description: "not used for clusters version 1.6 and later",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"anonymousAuth": {
							SchemaProps: spec.SchemaProps{
								Description: "AnonymousAuth chooses if you want anonymous auth on the kubelet api",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"clientCaFile": {
							SchemaProps: spec.SchemaProps{
								Description: "ClientCAFile is the path to a file container the CA certificate",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeconfigPath": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeconfigPath is the path to the kubeconfig file with authorization information and API server location kops will only use this for clusters version 1.6 and later",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"requireKubeconfig": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"podManifestPath": {
							SchemaProps: spec.SchemaProps{
								Description: "config is the path to the config file or directory of files",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "// syncFrequency is the max period between synchronizing running // containers and config SyncFrequency unversioned.Duration `json:\"syncFrequency\"` // fileCheckFrequency is the duration between checking config files for // new data FileCheckFrequency unversioned.Duration `json:\"fileCheckFrequency\"` // httpCheckFrequency is the duration between checking http for new data HTTPCheckFrequency unversioned.Duration `json:\"httpCheckFrequency\"` // manifestURL is the URL for accessing the container manifest ManifestURL string `json:\"manifestURL\"` // manifestURLHeader is the HTTP header to use when accessing the manifest // URL, with the key separated from the value with a ':', as in 'key:value' ManifestURLHeader string `json:\"manifestURLHeader\"` // enableServer enables the Kubelet's server EnableServer bool `json:\"enableServer\"` // address is the IP address for the Kubelet to serve on (set to 0.0.0.0 // for all interfaces) Address string `json:\"address\"` // port is the port for the Kubelet to serve on. Port uint `json:\"port\"` // readOnlyPort is the read-only port for the Kubelet to serve on with // no authentication/authorization (set to 0 to disable) ReadOnlyPort uint `json:\"readOnlyPort\"` // tLSCertFile is the file containing x509 Certificate for HTTPS.  (CA cert, // if any, concatenated after server cert). If tlsCertFile and // tlsPrivateKeyFile are not provided, a self-signed certificate // and key are generated for the public address and saved to the directory // passed to certDir. TLSCertFile string `json:\"tlsCertFile\"` // tLSPrivateKeyFile is the ile containing x509 private key matching // tlsCertFile. TLSPrivateKeyFile string `json:\"tlsPrivateKeyFile\"` // certDirectory is the directory where the TLS certs are located (by // default /var/run/kubernetes). If tlsCertFile and tlsPrivateKeyFile // are provided, this flag will be ignored. CertDirectory string `json:\"certDirectory\"` hostnameOverride is the hostname used to identify the kubelet instead of the actual hostname. Note: We recognize some additional values:\n @aws uses the hostname from the AWS metadata service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"allowPrivileged": {
							SchemaProps: spec.SchemaProps{
								Description: "// podInfraContainerImage is the image whose network/ipc namespaces // containers in each pod will use. PodInfraContainerImage string `json:\"podInfraContainerImage\"` // dockerEndpoint is the path to the docker endpoint to communicate with. DockerEndpoint string `json:\"dockerEndpoint\"` // rootDirectory is the directory path to place kubelet files (volume // mounts,etc). RootDirectory string `json:\"rootDirectory\"` // seccompProfileRoot is the directory path for seccomp profiles. SeccompProfileRoot string `json:\"seccompProfileRoot\"` allowPrivileged enables containers to request privileged mode. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"enableDebuggingHandlers": {
							SchemaProps: spec.SchemaProps{
								Description: "// hostNetworkSources is a comma-separated list of sources from which the // Kubelet allows pods to use of host network. Defaults to \"*\". HostNetworkSources []string `json:\"hostNetworkSources\"` // hostPIDSources is a comma-separated list of sources from which the // Kubelet allows pods to use the host pid namespace. Defaults to \"*\". HostPIDSources []string `json:\"hostPIDSources\"` // hostIPCSources is a comma-separated list of sources from which the // Kubelet allows pods to use the host ipc namespace. Defaults to \"*\". HostIPCSources []string `json:\"hostIPCSources\"` // registryPullQPS is the limit of registry pulls per second. If 0, // unlimited. Set to 0 for no limit. Defaults to 5.0. RegistryPullQPS float64 `json:\"registryPullQPS\"` // registryBurst is the maximum size of a bursty pulls, temporarily allows // pulls to burst to this number, while still not exceeding registryQps. // Only used if registryQps > 0. RegistryBurst int32 `json:\"registryBurst\"` // eventRecordQPS is the maximum event creations per second. If 0, there // is no limit enforced. EventRecordQPS float32 `json:\"eventRecordQPS\"` // eventBurst is the maximum size of a bursty event records, temporarily // allows event records to burst to this number, while still not exceeding // event-qps. Only used if eventQps > 0 EventBurst int32 `json:\"eventBurst\"` enableDebuggingHandlers enables server endpoints for log collection and local running of containers and commands",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"clusterDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "// minimumGCAge is the minimum age for a finished container before it is // garbage collected. MinimumGCAge unversioned.Duration `json:\"minimumGCAge\"` // maxPerPodContainerCount is the maximum number of old instances to // retain per container. Each container takes up some disk space. MaxPerPodContainerCount int32 `json:\"maxPerPodContainerCount\"` // maxContainerCount is the maximum number of old instances of containers // to retain globally. Each container takes up some disk space. MaxContainerCount int32 `json:\"maxContainerCount\"` // cAdvisorPort is the port of the localhost cAdvisor endpoint CAdvisorPort uint `json:\"cAdvisorPort\"` // healthzPort is the port of the localhost healthz endpoint HealthzPort int32 `json:\"healthzPort\"` // healthzBindAddress is the IP address for the healthz server to serve // on. HealthzBindAddress string `json:\"healthzBindAddress\"` // oomScoreAdj is The oom-score-adj value for kubelet process. Values // must be within the range [-1000, 1000]. OOMScoreAdj int32 `json:\"oomScoreAdj\"` // registerNode enables automatic registration with the apiserver. RegisterNode bool `json:\"registerNode\"` clusterDomain is the DNS domain for this cluster. If set, kubelet will configure all containers to search this domain in addition to the host's search domains.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterDNS": {
							SchemaProps: spec.SchemaProps{
								Description: "// masterServiceNamespace is The namespace from which the kubernetes // master services should be injected into pods. MasterServiceNamespace string `json:\"masterServiceNamespace\"` clusterDNS is the IP address for a cluster DNS server.  If set, kubelet will configure all containers to use this for DNS resolution in addition to the host's DNS servers",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkPluginName": {
							SchemaProps: spec.SchemaProps{
								Description: "// streamingConnectionIdleTimeout is the maximum time a streaming connection // can be idle before the connection is automatically closed. StreamingConnectionIdleTimeout unversioned.Duration `json:\"streamingConnectionIdleTimeout\"` // nodeStatusUpdateFrequency is the frequency that kubelet posts node // status to master. Note: be cautious when changing the constant, it // must work with nodeMonitorGracePeriod in nodecontroller. NodeStatusUpdateFrequency unversioned.Duration `json:\"nodeStatusUpdateFrequency\"` // minimumGCAge is the minimum age for a unused image before it is // garbage collected. ImageMinimumGCAge unversioned.Duration `json:\"imageMinimumGCAge\"` // lowDiskSpaceThresholdMB is the absolute free disk space, in MB, to // maintain. When disk space falls below this threshold, new pods would // be rejected. LowDiskSpaceThresholdMB int32 `json:\"lowDiskSpaceThresholdMB\"` // How frequently to calculate and cache volume disk usage for all pods VolumeStatsAggPeriod unversioned.Duration `json:\"volumeStatsAggPeriod\"` networkPluginName is the name of the network plugin to be invoked for various events in kubelet/pod lifecycle",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "// networkPluginDir is the full path of the directory in which to search // for network plugins NetworkPluginDir string `json:\"networkPluginDir\"` // volumePluginDir is the full path of the directory in which to search // for additional third party volume plugins VolumePluginDir string `json:\"volumePluginDir\"` cloudProvider is the provider for cloud services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeletCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "KubeletCgroups is the absolute name of cgroups to isolate the kubelet in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"runtimeCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "Cgroups that container runtime is expected to be isolated in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "SystemCgroups is absolute name of cgroups in which to place all non-kernel processes that are not already in a container. Empty for no container. Rolling back the flag requires a reboot.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cgroupRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "cgroupRoot is the root cgroup to use for pods. This is handled by the container runtime on a best effort basis.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configureCbr0": {
							SchemaProps: spec.SchemaProps{
								Description: "// containerRuntime is the container runtime to use. ContainerRuntime string `json:\"containerRuntime\"` // rktPath is the path of rkt binary. Leave empty to use the first rkt in // $PATH. RktPath string `json:\"rktPath,omitempty\"` // rktApiEndpoint is the endpoint of the rkt API service to communicate with. RktAPIEndpoint string `json:\"rktAPIEndpoint,omitempty\"` // rktStage1Image is the image to use as stage1. Local paths and // http/https URLs are supported. RktStage1Image string `json:\"rktStage1Image,omitempty\"` // lockFilePath is the path that kubelet will use to as a lock file. // It uses this file as a lock to synchronize with other kubelet processes // that may be running. LockFilePath string `json:\"lockFilePath\"` // ExitOnLockContention is a flag that signifies to the kubelet that it is running // in \"bootstrap\" mode. This requires that 'LockFilePath' has been set. // This will cause the kubelet to listen to inotify events on the lock file, // releasing it and exiting when another process tries to open that file. ExitOnLockContention bool `json:\"exitOnLockContention\"` configureCBR0 enables the kublet to configure cbr0 based on Node.Spec.PodCIDR.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hairpinMode": {
							SchemaProps: spec.SchemaProps{
								Description: "How should the kubelet configure the container bridge for hairpin packets. Setting this flag allows endpoints in a Service to loadbalance back to themselves if they should try to access their own Service. Values:\n  \"promiscuous-bridge\": make the container bridge promiscuous.\n  \"hairpin-veth\":       set the hairpin flag on container veth interfaces.\n  \"none\":               do nothing.\nSetting --configure-cbr0 to false implies that to achieve hairpin NAT one must set --hairpin-mode=veth-flag, because bridge assumes the existence of a container bridge named cbr0.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"babysitDaemons": {
							SchemaProps: spec.SchemaProps{
								Description: "The node has babysitter process monitoring docker and kubelet. Removed as of 1.7",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"maxPods": {
							SchemaProps: spec.SchemaProps{
								Description: "maxPods is the number of pods that can run on this Kubelet.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"nvidiaGPUs": {
							SchemaProps: spec.SchemaProps{
								Description: "nvidiaGPUs is the number of NVIDIA GPU devices on this node.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"podCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "// dockerExecHandlerName is the handler to use when executing a command // in a container. Valid values are 'native' and 'nsenter'. Defaults to // 'native'. DockerExecHandlerName string `json:\"dockerExecHandlerName\"` The CIDR to use for pod IP addresses, only used in standalone mode. In cluster mode, this is obtained from the master.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resolvConf": {
							SchemaProps: spec.SchemaProps{
								Description: "ResolverConfig is the resolver configuration file used as the basis for the container DNS resolution configuration.\"), []",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reconcileCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "// cpuCFSQuota is Enable CPU CFS quota enforcement for containers that // specify CPU limits CPUCFSQuota bool `json:\"cpuCFSQuota\"` // containerized should be set to true if kubelet is running in a container. Containerized bool `json:\"containerized\"` // maxOpenFiles is Number of files that can be opened by Kubelet process. MaxOpenFiles uint64 `json:\"maxOpenFiles\"` reconcileCIDR is Reconcile node CIDR with the CIDR specified by the API server. No-op if register-node or configure-cbr0 is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"registerSchedulable": {
							SchemaProps: spec.SchemaProps{
								Description: "registerSchedulable tells the kubelet to register the node as schedulable. No-op if register-node is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "nodeLabels to add when registering the node in the cluster.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nonMasqueradeCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "nonMasqueradeCIDR configures masquerading: traffic to IPs outside this range will use IP masquerade.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableCustomMetrics": {
							SchemaProps: spec.SchemaProps{
								Description: "enable gathering custom metrics.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"networkPluginMTU": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginMTU is the MTU to be passed to the network plugin, and overrides the default MTU for cases where it cannot be automatically computed (such as IPSEC).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"imageGCHighThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"imageGCLowThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"evictionHard": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of hard eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoft": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of soft eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoftGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of grace periods for each soft eviction signal.  For example, 'memory.available=30s'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionPressureTransitionPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Duration for which the kubelet has to wait before transitioning out of an eviction pressure condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"evictionMaxPodGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"evictionMinimumReclaim": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of minimum reclaims (e.g. imagefs.available=2Gi) that describes the minimum amount of resource the kubelet will reclaim when performing a pod eviction if that resource is under pressure.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumePluginDirectory": {
							SchemaProps: spec.SchemaProps{
								Description: "The full path of the directory in which to search for additional third party volume plugins",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"taints": {
							SchemaProps: spec.SchemaProps{
								Description: "Taints to add when registering a node in the cluster",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"featureGates": {
							SchemaProps: spec.SchemaProps{
								Description: "FeatureGates is set of key=value pairs that describe feature gates for alpha/experimental features.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "Resource reservation for kubernetes system daemons like the kubelet, container runtime, node problem detector, etc.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeReservedCgroup": {
							SchemaProps: spec.SchemaProps{
								Description: "Control group for kube daemons.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "Capture resource reservation for OS system daemons like sshd, udev, etc.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"systemReservedCgroup": {
							SchemaProps: spec.SchemaProps{
								Description: "Parent control group for OS system daemons.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enforceNodeAllocatable": {
							SchemaProps: spec.SchemaProps{
								Description: "Enforce Allocatable across pods whenever the overall usage across all pods exceeds Allocatable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KubenetNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "KubenetNetworkingSpec is the specification for kubenet networking, largely integrated but intended to replace classic",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.KuberouterNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Kuberouter declares that we want Canal networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.LeaderElectionConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LeaderElectionConfiguration defines the configuration of leader election clients for components that can run with leader election enabled.",
					Properties: map[string]spec.Schema{
						"leaderElect": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.LoadBalancerAccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"idleTimeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.NetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkingSpec allows selection and configuration of a networking plugin",
					Properties: map[string]spec.Schema{
						"classic": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.ClassicNetworkingSpec"),
							},
						},
						"kubenet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KubenetNetworkingSpec"),
							},
						},
						"external": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.ExternalNetworkingSpec"),
							},
						},
						"cni": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.CNINetworkingSpec"),
							},
						},
						"kopeio": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioNetworkingSpec"),
							},
						},
						"weave": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.WeaveNetworkingSpec"),
							},
						},
						"flannel": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.FlannelNetworkingSpec"),
							},
						},
						"calico": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.CalicoNetworkingSpec"),
							},
						},
						"canal": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.CanalNetworkingSpec"),
							},
						},
						"kuberouter": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha1.KuberouterNetworkingSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.CNINetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.CalicoNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.CanalNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.ClassicNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.ExternalNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.FlannelNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.KopeioNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.KubenetNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.KuberouterNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.WeaveNetworkingSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.RBACAuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.TopologySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"masters": {
							SchemaProps: spec.SchemaProps{
								Description: "The environment to launch the Kubernetes masters in public|private",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodes": {
							SchemaProps: spec.SchemaProps{
								Description: "The environment to launch the Kubernetes nodes in public|private",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bastion": {
							SchemaProps: spec.SchemaProps{
								Description: "Bastion provide an external facing point of entry into a network containing private network instances. This host can provide a single point of fortification or audit and can be started and stopped to enable or disable inbound SSH communication from the Internet, some call bastion as the \"jump server\".",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.BastionSpec"),
							},
						},
						"dns": {
							SchemaProps: spec.SchemaProps{
								Description: "DNS configures options relating to DNS, in particular whether we use a public or a private hosted zone",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha1.DNSSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha1.BastionSpec", "k8s.io/kops/pkg/apis/kops/v1alpha1.DNSSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha1.WeaveNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Weave declares that we want Weave networking",
					Properties: map[string]spec.Schema{
						"mtu": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.AccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"dns": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.DNSAccessSpec"),
							},
						},
						"loadBalancer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.LoadBalancerAccessSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.DNSAccessSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.LoadBalancerAccessSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.AlwaysAllowAuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.AuthenticationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kopeio": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioAuthenticationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioAuthenticationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.AuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"alwaysAllow": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.AlwaysAllowAuthorizationSpec"),
							},
						},
						"rbac": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.RBACAuthorizationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.AlwaysAllowAuthorizationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.RBACAuthorizationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.BastionSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"bastionPublicName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"idleTimeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "IdleTimeoutSeconds is the bastion's Loadbalancer idle timeout",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.CNINetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "CNI is the specification for networking that is implemented by a Daemonset Networking is not managed by kops - we can create options here that directly configure e.g. weave but this is useful for arbitrary network modes or for modes that don't need additional configuration.",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.CalicoNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Calico declares that we want Calico networking",
					Properties: map[string]spec.Schema{
						"crossSubnet": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.CanalNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Canal declares that we want Canal networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ClassicNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClassicNetworkingSpec is the specification of classic networking mode, integrated into kubernetes",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.CloudConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"multizone": {
							SchemaProps: spec.SchemaProps{
								Description: "GCE cloud-config options",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"nodeTags": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"nodeInstancePrefix": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"disableSecurityGroupIngress": {
							SchemaProps: spec.SchemaProps{
								Description: "AWS cloud-config options",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"elbSecurityGroup": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereUsername": {
							SchemaProps: spec.SchemaProps{
								Description: "vSphere cloud-config specs",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"vSpherePassword": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereServer": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereDatacenter": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereDatastore": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereResourcePool": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"vSphereCoreDNSServer": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.Cluster": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.Cluster"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.Cluster"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"channel": {
							SchemaProps: spec.SchemaProps{
								Description: "The Channel we are following",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configBase": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigBase is the path where we store configuration for the cluster This might be different that the location when the cluster spec itself is stored, both because this must be accessible to the cluster, and because it might be on a different cloud or storage system (etcd vs S3)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "The CloudProvider to use (aws or gce)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubernetesVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "The version of kubernetes to install (optional, and can be a \"spec\" like stable)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subnets": {
							SchemaProps: spec.SchemaProps{
								Description: "Configuration of subnets we are targeting",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSubnetSpec"),
										},
									},
								},
							},
						},
						"project": {
							SchemaProps: spec.SchemaProps{
								Description: "Project is the cloud project we should use, required on GCE",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masterPublicName": {
							SchemaProps: spec.SchemaProps{
								Description: "MasterPublicName is the external DNS name for the master nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"masterInternalName": {
							SchemaProps: spec.SchemaProps{
								Description: "MasterInternalName is the internal DNS name for the master nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR used for the AWS VPC / GCE Network, or otherwise allocated to k8s This is a real CIDR, not the internal k8s network",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkID": {
							SchemaProps: spec.SchemaProps{
								Description: "NetworkID is an identifier of a network, if we want to reuse/share an existing network (e.g. an AWS VPC)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"topology": {
							SchemaProps: spec.SchemaProps{
								Description: "Topology defines the type of network topology to use on the cluster - default public This is heavily weighted towards AWS for the time being, but should also be agnostic enough to port out to GCE later if needed",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.TopologySpec"),
							},
						},
						"secretStore": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretStore is the VFS path to where secrets are stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"keyStore": {
							SchemaProps: spec.SchemaProps{
								Description: "KeyStore is the VFS path to where SSL keys and certificates are stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configStore": {
							SchemaProps: spec.SchemaProps{
								Description: "ConfigStore is the VFS path to where the configuration (Cluster, InstanceGroups etc) is stored",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"dnsZone": {
							SchemaProps: spec.SchemaProps{
								Description: "DNSZone is the DNS zone we should use when configuring DNS This is because some clouds let us define a managed zone foo.bar, and then have kubernetes.dev.foo.bar, without needing to define dev.foo.bar as a hosted zone. DNSZone will probably be a suffix of the MasterPublicName and MasterInternalName Note that DNSZone can either by the host name of the zone (containing dots), or can be an identifier for the zone.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterDNSDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "ClusterDNSDomain is the suffix we use for internal DNS names (normally cluster.local)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"serviceClusterIPRange": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceClusterIPRange is the CIDR, from the internal network, where we allocate IPs for services",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nonMasqueradeCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "NonMasqueradeCIDR is the CIDR for the internal k8s network (on which pods & services live) It cannot overlap ServiceClusterIPRange",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"sshAccess": {
							SchemaProps: spec.SchemaProps{
								Description: "SSHAccess determines the permitted access to SSH Currently only a single CIDR is supported (though a richer grammar could be added in future)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubernetesApiAccess": {
							SchemaProps: spec.SchemaProps{
								Description: "KubernetesAPIAccess determines the permitted access to the API endpoints (master HTTPS) Currently only a single CIDR is supported (though a richer grammar could be added in future)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"isolateMasters": {
							SchemaProps: spec.SchemaProps{
								Description: "IsolatesMasters determines whether we should lock down masters so that they are not on the pod network. true is the kube-up behaviour, but it is very surprising: it means that daemonsets only work on the master if they have hostNetwork=true. false is now the default, and it will:\n * give the master a normal PodCIDR\n * run kube-proxy on the master\n * enable debugging handlers on the master, so kubectl logs works",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"updatePolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "UpdatePolicy determines the policy for applying upgrades automatically. Valid values:\n  'external' do not apply updates automatically - they are applied manually or by an external system\n  missing: default policy (currently OS security upgrades that do not require a reboot)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"additionalPolicies": {
							SchemaProps: spec.SchemaProps{
								Description: "Additional policies to add for roles",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"etcdClusters": {
							SchemaProps: spec.SchemaProps{
								Description: "EtcdClusters stores the configuration for each cluster",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdClusterSpec"),
										},
									},
								},
							},
						},
						"docker": {
							SchemaProps: spec.SchemaProps{
								Description: "Component configurations",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.DockerConfig"),
							},
						},
						"kubeDNS": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeDNSConfig"),
							},
						},
						"kubeAPIServer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeAPIServerConfig"),
							},
						},
						"kubeControllerManager": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeControllerManagerConfig"),
							},
						},
						"kubeScheduler": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeSchedulerConfig"),
							},
						},
						"kubeProxy": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeProxyConfig"),
							},
						},
						"kubelet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec"),
							},
						},
						"masterKubelet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec"),
							},
						},
						"cloudConfig": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.CloudConfiguration"),
							},
						},
						"networking": {
							SchemaProps: spec.SchemaProps{
								Description: "Networking configuration",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.NetworkingSpec"),
							},
						},
						"api": {
							SchemaProps: spec.SchemaProps{
								Description: "API field controls how the API is exposed outside the cluster",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.AccessSpec"),
							},
						},
						"authentication": {
							SchemaProps: spec.SchemaProps{
								Description: "Authentication field controls how the cluster is configured for authentication",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.AuthenticationSpec"),
							},
						},
						"authorization": {
							SchemaProps: spec.SchemaProps{
								Description: "Authorization field controls how the cluster is configured for authorization",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.AuthorizationSpec"),
							},
						},
						"cloudLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "Tags for AWS resources",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"hooks": {
							SchemaProps: spec.SchemaProps{
								Description: "Hooks for custom actions e.g. on first installation",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.HookSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.AccessSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.AuthenticationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.AuthorizationSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.CloudConfiguration", "k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSubnetSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.DockerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdClusterSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.HookSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeAPIServerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeControllerManagerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeDNSConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeProxyConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeSchedulerConfig", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.NetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.TopologySpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ClusterSubnetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"zone": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"id": {
							SchemaProps: spec.SchemaProps{
								Description: "ProviderID is the cloud provider id for the objects associated with the zone (the subnet on AWS)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"egress": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.DNSAccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.DNSSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.DockerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"bridge": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ipTables": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ipMasq": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"logDriver": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logOpt": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"storage": {
							SchemaProps: spec.SchemaProps{
								Description: "Storage maps to the docker storage flag But nodeup will also process a comma-separate list, selecting the first supported option",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"insecureRegistry": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"registryMirrors": {
							SchemaProps: spec.SchemaProps{
								Description: "Set mirrors for dockerd, benefiting cluster provisioning and image pulling",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"mtu": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"bridgeIP": {
							SchemaProps: spec.SchemaProps{
								Description: "The bridge cidr (--bip) flag",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"version": {
							SchemaProps: spec.SchemaProps{
								Description: "The version of docker to install Be careful if changing this; not all docker versions are validated, and they will break in bad ways.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdClusterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the name of the etcd cluster (main, events etc)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"etcdMembers": {
							SchemaProps: spec.SchemaProps{
								Description: "EtcdMember stores the configurations for each member of the cluster (including the data volume)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdMemberSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdMemberSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.EtcdMemberSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the name of the member within the etcd cluster",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"instanceGroup": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"volumeType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"volumeSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"kmsKeyId": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"encryptedVolume": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ExecContainerAction": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "Docker image name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"command": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.ExternalNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExternalNetworkingSpec is the specification for networking that is implemented by a Daemonset It also uses kubenet",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.Federation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Federation represents a federated set of kubernetes clusters",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.FederationSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.FederationSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.FederationList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.Federation"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.Federation"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.FederationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"controllers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"members": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"dnsName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.FlannelNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Flannel declares that we want Flannel networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.HookSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"execContainer": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.ExecContainerAction"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.ExecContainerAction"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "InstanceGroup represents a group of instances (either nodes or masters) with the same configuration",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroupSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroupSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroup"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.InstanceGroupSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"role": {
							SchemaProps: spec.SchemaProps{
								Description: "Type determines the role of instances in this group: masters or nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"minSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"maxSize": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"machineType": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeInstancePrefix string `json:\",omitempty\"` NodeLabels         string `json:\",omitempty\"`",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rootVolumeSize": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeSize is the size of the EBS root volume to use, in GB",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"rootVolumeType": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeType is the type of the EBS root volume to use (e.g. gp2)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"rootVolumeOptimization": {
							SchemaProps: spec.SchemaProps{
								Description: "RootVolumeOptimization enables EBS optimization for an instance",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"subnets": {
							SchemaProps: spec.SchemaProps{
								Description: "Subnets is the names of the Subnets (as specified in the Cluster) where machines in this instance group should be placed",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"maxPrice": {
							SchemaProps: spec.SchemaProps{
								Description: "MaxPrice indicates this is a spot-pricing group, with the specified value as our max-price bid",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"associatePublicIp": {
							SchemaProps: spec.SchemaProps{
								Description: "AssociatePublicIP is true if we want instances to have a public IP",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"additionalSecurityGroups": {
							SchemaProps: spec.SchemaProps{
								Description: "AdditionalSecurityGroups attaches additional security groups (e.g. i-123456)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"cloudLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "CloudLabels indicates the labels for instances in this group, at the AWS level",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nodeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeLabels indicates the kubernetes labels for nodes in this group",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"tenancy": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes the tenancy of the instance group. Can be either default or dedicated. Currently only applies to AWS.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubelet": {
							SchemaProps: spec.SchemaProps{
								Description: "Kubelet overrides kubelet config from the ClusterSpec",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec"),
							},
						},
						"taints": {
							SchemaProps: spec.SchemaProps{
								Description: "Taints indicates the kubernetes taints for nodes in this group",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioAuthenticationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Kopeio declares that we want Kopeio networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeAPIServerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"pathSrvKubernetes": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pathSrvSshproxy": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"securePort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"insecurePort": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"address": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"etcdServers": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"etcdServersOverrides": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"admissionControl": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"serviceClusterIPRange": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"clientCAFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"basicAuthFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tlsCertFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tlsPrivateKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tokenAuthFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"allowPrivileged": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"apiServerCount": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"runtimeConfig": {
							SchemaProps: spec.SchemaProps{
								Description: "keys and values in RuntimeConfig are parsed into the `--runtime-config` parameter for KubeAPIServer, concatenated with commas. ex: `--runtime-config=key1=value1,key2=value2`. Use this to enable alpha resources on kube-apiserver",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeletClientCertificate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kubeletClientKey": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"anonymousAuth": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"kubeletPreferredAddressTypes": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"storageBackend": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"oidcUsernameClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcGroupsClaim": {
							SchemaProps: spec.SchemaProps{
								Description: "If provided, the name of a custom OpenID Connect claim for specifying user groups. The claim value is expected to be a string or array of strings.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcIssuerURL": {
							SchemaProps: spec.SchemaProps{
								Description: "The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcClientID": {
							SchemaProps: spec.SchemaProps{
								Description: "The client ID for the OpenID Connect client, must be set if oidc-issuer-url is set.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"oidcCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, the OpenID server's certificate will be verified by one of the authorities in the oidc-ca-file otherwise the host's root CA set will be used.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"auditLogPath": {
							SchemaProps: spec.SchemaProps{
								Description: "If set, all requests coming to the apiserver will be logged to this file.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"auditLogMaxAge": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum number of days to retain old audit log files based on the timestamp encoded in their filename.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"auditLogMaxBackups": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum number of old audit log files to retain.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"auditLogMaxSize": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum size in megabytes of the audit log file before it gets rotated. Defaults to 100MB.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"authenticationTokenWebhookConfigFile": {
							SchemaProps: spec.SchemaProps{
								Description: "File with webhook configuration for token authentication in kubeconfig format. The API server will query the remote service to determine authentication for bearer tokens.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"authenticationTokenWebhookCacheTtl": {
							SchemaProps: spec.SchemaProps{
								Description: "The duration to cache responses from the webhook token authenticator. Default is 2m. (default 2m0s)",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"authorizationMode": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"authorizationRbacSuperUser": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeControllerManagerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"master": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"serviceAccountPrivateKeyFile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"pathSrvKubernetes": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "cloudProvider is the provider for cloud services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterName": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterName is the instance prefix for the cluster.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterCIDR is CIDR Range for Pods in cluster.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"allocateNodeCIDRs": {
							SchemaProps: spec.SchemaProps{
								Description: "allocateNodeCIDRs enables CIDRs for Pods to be allocated and, if ConfigureCloudRoutes is true, to be set on the cloud provider.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"configureCloudRoutes": {
							SchemaProps: spec.SchemaProps{
								Description: "configureCloudRoutes enables CIDRs allocated with allocateNodeCIDRs to be configured on the cloud provider.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"rootCAFile": {
							SchemaProps: spec.SchemaProps{
								Description: "rootCAFile is the root certificate authority will be included in service account's token secret. This must be a valid PEM-encoded CA bundle.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"leaderElection": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElection defines the configuration of leader election client.",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.LeaderElectionConfiguration"),
							},
						},
						"attachDetachReconcileSyncPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "ReconcilerSyncLoopPeriod is the amount of time the reconciler sync states loop wait between successive executions. Is set to 1 min by kops by default",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"terminatedPodGCThreshold": {
							SchemaProps: spec.SchemaProps{
								Description: "terminatedPodGCThreshold is the number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. If <= 0, the terminated pod garbage collector is disabled.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"useServiceAccountCredentials": {
							SchemaProps: spec.SchemaProps{
								Description: "UseServiceAccountCredentials controls whether we use individual service account credentials for each controller.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/kops/pkg/apis/kops/v1alpha2.LeaderElectionConfiguration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeDNSConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Description: "Image is the name of the docker image to run",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"domain": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"serverIP": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeProxyConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"cpuRequest": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "hostnameOverride, if non-empty, will be used as the identity instead of the actual hostname. Note: We recognize some additional values:\n @aws uses the hostname from the AWS metadata service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"master": {
							SchemaProps: spec.SchemaProps{
								Description: "master is the address of the Kubernetes API server (overrides any value in kubeconfig)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterCIDR is the CIDR range of the pods in the cluster. It is used to bridge traffic coming from outside of the cluster. If not provided, no off-cluster bridging will be performed.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeSchedulerConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"master": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"image": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"leaderElection": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElection defines the configuration of leader election client.",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.LeaderElectionConfiguration"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.LeaderElectionConfiguration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubeletConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"apiServers": {
							SchemaProps: spec.SchemaProps{
								Description: "not used for clusters version 1.6 and later",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"anonymousAuth": {
							SchemaProps: spec.SchemaProps{
								Description: "AnonymousAuth chooses if you want anonymous auth on the kubelet api",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"clientCaFile": {
							SchemaProps: spec.SchemaProps{
								Description: "The client CA which the requestes for the above must be signed by",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeconfigPath": {
							SchemaProps: spec.SchemaProps{
								Description: "kubeconfigPath is the path to the kubeconfig file with authorization information and API server location kops will only use this for clusters version 1.6 and later",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"requireKubeconfig": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"logLevel": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"podManifestPath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"hostnameOverride": {
							SchemaProps: spec.SchemaProps{
								Description: "hostnameOverride is the hostname used to identify the kubelet instead of the actual hostname. Note: We recognize some additional values:\n @aws uses the hostname from the AWS metadata service",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"allowPrivileged": {
							SchemaProps: spec.SchemaProps{
								Description: "allowPrivileged enables containers to request privileged mode. Defaults to false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"enableDebuggingHandlers": {
							SchemaProps: spec.SchemaProps{
								Description: "enableDebuggingHandlers enables server endpoints for log collection and local running of containers and commands",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"clusterDomain": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterDomain is the DNS domain for this cluster. If set, kubelet will configure all containers to search this domain in addition to the host's search domains.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"clusterDNS": {
							SchemaProps: spec.SchemaProps{
								Description: "clusterDNS is the IP address for a cluster DNS server.  If set, kubelet will configure all containers to use this for DNS resolution in addition to the host's DNS servers",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"networkPluginName": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginName is the name of the network plugin to be invoked for various events in kubelet/pod lifecycle",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cloudProvider": {
							SchemaProps: spec.SchemaProps{
								Description: "cloudProvider is the provider for cloud services.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"kubeletCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "KubeletCgroups is the absolute name of cgroups to isolate the kubelet in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"runtimeCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "Cgroups that container runtime is expected to be isolated in.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemCgroups": {
							SchemaProps: spec.SchemaProps{
								Description: "SystemCgroups is absolute name of cgroups in which to place all non-kernel processes that are not already in a container. Empty for no container. Rolling back the flag requires a reboot.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cgroupRoot": {
							SchemaProps: spec.SchemaProps{
								Description: "cgroupRoot is the root cgroup to use for pods. This is handled by the container runtime on a best effort basis.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"configureCbr0": {
							SchemaProps: spec.SchemaProps{
								Description: "configureCBR0 enables the kublet to configure cbr0 based on Node.Spec.PodCIDR.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"hairpinMode": {
							SchemaProps: spec.SchemaProps{
								Description: "How should the kubelet configure the container bridge for hairpin packets. Setting this flag allows endpoints in a Service to loadbalance back to themselves if they should try to access their own Service. Values:\n  \"promiscuous-bridge\": make the container bridge promiscuous.\n  \"hairpin-veth\":       set the hairpin flag on container veth interfaces.\n  \"none\":               do nothing.\nSetting --configure-cbr0 to false implies that to achieve hairpin NAT one must set --hairpin-mode=veth-flag, because bridge assumes the existence of a container bridge named cbr0.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"babysitDaemons": {
							SchemaProps: spec.SchemaProps{
								Description: "The node has babysitter process monitoring docker and kubelet. Removed as of 1.7",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"maxPods": {
							SchemaProps: spec.SchemaProps{
								Description: "maxPods is the number of pods that can run on this Kubelet.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"nvidiaGPUs": {
							SchemaProps: spec.SchemaProps{
								Description: "nvidiaGPUs is the number of NVIDIA GPU devices on this node.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"podCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR to use for pod IP addresses, only used in standalone mode. In cluster mode, this is obtained from the master.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reconcileCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "reconcileCIDR is Reconcile node CIDR with the CIDR specified by the API server. No-op if register-node or configure-cbr0 is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"registerSchedulable": {
							SchemaProps: spec.SchemaProps{
								Description: "registerSchedulable tells the kubelet to register the node as schedulable. No-op if register-node is false.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"resolvConf": {
							SchemaProps: spec.SchemaProps{
								Description: "ResolverConfig is the resolver configuration file used as the basis for the container DNS resolution configuration.\"), []",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "nodeLabels to add when registering the node in the cluster.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"nonMasqueradeCIDR": {
							SchemaProps: spec.SchemaProps{
								Description: "nonMasqueradeCIDR configures masquerading: traffic to IPs outside this range will use IP masquerade.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enableCustomMetrics": {
							SchemaProps: spec.SchemaProps{
								Description: "enable gathering custom metrics.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"networkPluginMTU": {
							SchemaProps: spec.SchemaProps{
								Description: "networkPluginMTU is the MTU to be passed to the network plugin, and overrides the default MTU for cases where it cannot be automatically computed (such as IPSEC).",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"imageGCHighThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"imageGCLowThresholdPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "imageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"evictionHard": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of hard eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoft": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of soft eviction expressions.  For example, 'memory.available<300Mi'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionSoftGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of grace periods for each soft eviction signal.  For example, 'memory.available=30s'.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"evictionPressureTransitionPeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Duration for which the kubelet has to wait before transitioning out of an eviction pressure condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
							},
						},
						"evictionMaxPodGracePeriod": {
							SchemaProps: spec.SchemaProps{
								Description: "Maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"evictionMinimumReclaim": {
							SchemaProps: spec.SchemaProps{
								Description: "Comma-delimited list of minimum reclaims (e.g. imagefs.available=2Gi) that describes the minimum amount of resource the kubelet will reclaim when performing a pod eviction if that resource is under pressure.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"volumePluginDirectory": {
							SchemaProps: spec.SchemaProps{
								Description: "The full path of the directory in which to search for additional third party volume plugins",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"taints": {
							SchemaProps: spec.SchemaProps{
								Description: "Taints to add when registering a node in the cluster",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"featureGates": {
							SchemaProps: spec.SchemaProps{
								Description: "FeatureGates is set of key=value pairs that describe feature gates for alpha/experimental features.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "Resource reservation for kubernetes system daemons like the kubelet, container runtime, node problem detector, etc.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"kubeReservedCgroup": {
							SchemaProps: spec.SchemaProps{
								Description: "Control group for kube daemons.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"systemReserved": {
							SchemaProps: spec.SchemaProps{
								Description: "Capture resource reservation for OS system daemons like sshd, udev, etc.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"systemReservedCgroup": {
							SchemaProps: spec.SchemaProps{
								Description: "Parent control group for OS system daemons.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enforceNodeAllocatable": {
							SchemaProps: spec.SchemaProps{
								Description: "Enforce Allocatable across pods whenever the overall usage across all pods exceeds Allocatable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KubenetNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "KubenetNetworkingSpec is the specification for kubenet networking, largely integrated but intended to replace classic",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.KuberouterNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Kuberouter declares that we want Canal networking",
					Properties:  map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.LeaderElectionConfiguration": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "LeaderElectionConfiguration defines the configuration of leader election clients for components that can run with leader election enabled.",
					Properties: map[string]spec.Schema{
						"leaderElect": {
							SchemaProps: spec.SchemaProps{
								Description: "leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.LoadBalancerAccessSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"idleTimeoutSeconds": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.NetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NetworkingSpec allows selection and configuration of a networking plugin",
					Properties: map[string]spec.Schema{
						"classic": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.ClassicNetworkingSpec"),
							},
						},
						"kubenet": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KubenetNetworkingSpec"),
							},
						},
						"external": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.ExternalNetworkingSpec"),
							},
						},
						"cni": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.CNINetworkingSpec"),
							},
						},
						"kopeio": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioNetworkingSpec"),
							},
						},
						"weave": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.WeaveNetworkingSpec"),
							},
						},
						"flannel": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.FlannelNetworkingSpec"),
							},
						},
						"calico": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.CalicoNetworkingSpec"),
							},
						},
						"canal": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.CanalNetworkingSpec"),
							},
						},
						"kuberouter": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/kops/pkg/apis/kops/v1alpha2.KuberouterNetworkingSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.CNINetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.CalicoNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.CanalNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.ClassicNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.ExternalNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.FlannelNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.KopeioNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.KubenetNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.KuberouterNetworkingSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.WeaveNetworkingSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.RBACAuthorizationSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{},
				},
			},
			Dependencies: []string{},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.TopologySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"masters": {
							SchemaProps: spec.SchemaProps{
								Description: "The environment to launch the Kubernetes masters in public|private",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodes": {
							SchemaProps: spec.SchemaProps{
								Description: "The environment to launch the Kubernetes nodes in public|private",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bastion": {
							SchemaProps: spec.SchemaProps{
								Description: "Bastion provide an external facing point of entry into a network containing private network instances. This host can provide a single point of fortification or audit and can be started and stopped to enable or disable inbound SSH communication from the Internet, some call bastion as the \"jump server\".",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.BastionSpec"),
							},
						},
						"dns": {
							SchemaProps: spec.SchemaProps{
								Description: "DNS configures options relating to DNS, in particular whether we use a public or a private hosted zone",
								Ref:         ref("k8s.io/kops/pkg/apis/kops/v1alpha2.DNSSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/kops/pkg/apis/kops/v1alpha2.BastionSpec", "k8s.io/kops/pkg/apis/kops/v1alpha2.DNSSpec"},
		},
		"k8s.io/kops/pkg/apis/kops/v1alpha2.WeaveNetworkingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Weave declares that we want Weave networking",
					Properties: map[string]spec.Schema{
						"mtu": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
	}
}
